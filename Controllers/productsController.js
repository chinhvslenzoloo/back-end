const {PrismaClient} = require("@prisma/client");
const prisma = new PrismaClient();
const multer = require("multer");
const path = require("path");
const fs = require("fs");

// üìÇ –ó—É—Ä–∞–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö —Ö–∞–≤—Ç–∞—Å “Ø“Ø—Å–≥—ç—Ö
const uploadDir = "file/";
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, {recursive: true});
}

// üìÇ Multer —Ç–æ—Ö–∏—Ä–≥–æ–æ (–∑—É—Ä–∞–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö)
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "file/");
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname)); // –ó—É—Ä–≥–∏–π–Ω –Ω—ç—Ä–∏–π–≥ ”©—Ä–≥”©—Ç–≥”©–ª—Ç—ç–π –Ω—å —Ö–∞–¥–≥–∞–ª–Ω–∞
  },
});

const upload = multer({storage}); // üñºÔ∏è –ó—É—Ä–∞–≥ —Ö“Ø–ª—ç—ç–Ω –∞–≤–∞—Ö —Ç–æ—Ö–∏—Ä–≥–æ–æ

// üì¶ –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω“Ø“Ø–¥–∏–π–≥ –∞–≤–∞—Ö
const getProducts = async (req, res) => {
  try {
    const products = await prisma.product.findMany({
      include: {category: true}, // –ö–∞—Ç–µ–≥–æ—Ä–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –æ—Ä—É—É–ª–∞—Ö
    });
    res.status(200).json(products);
  } catch (error) {
    res.status(500).json({error: "Error fetching products"});
  }
};

// üì¶ –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω –∞–≤–∞—Ö (ID-–∞–∞—Ä)
const getProductById = async (req, res) => {
  const {id} = req.params;
  try {
    const product = await prisma.product.findUnique({
      where: {id: parseInt(id)},
      include: {category: true},
    });

    if (!product) return res.status(404).json({error: "Product not found"});

    res.status(200).json(product);
  } catch (error) {
    res.status(500).json({error: "Error fetching product by ID"});
  }
};

// üÜï –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω “Ø“Ø—Å–≥—ç—Ö (–∑—É—Ä–∞–≥—Ç–∞–π)
const createProduct = async (req, res) => {
  const {name, description, price, size, color, stockQuantity, categoryId} =
    req.body;

  try {
    const imageUrl = req.file ? `/file/${req.file.filename}` : null;

    // –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω “Ø“Ø—Å–≥—ç—Ö
    const product = await prisma.product.create({
      data: {
        name,
        description,
        price: parseFloat(price),
        size,
        color,
        stockQuantity: parseInt(stockQuantity),
        imageUrl,
        category: {connect: {id: parseInt(categoryId)}}, // –ö–∞—Ç–µ–≥–æ—Ä–∏–π–≥ —Ö–æ–ª–±–æ—Ö
      },
    });

    res.status(201).json(product);
  } catch (error) {
    console.error("Error creating product:", error);
    res.status(500).json({error: "Error creating product"});
  }
};

// üîÑ –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω –∑–∞—Å–∞—Ö (ID-–∞–∞—Ä)
const updateProduct = async (req, res) => {
  const {id} = req.params;
  const {name, description, price, size, color, stockQuantity, categoryId} =
    req.body;

  try {
    const imageUrl = req.file ? `/file/${req.file.filename}` : undefined;

    // –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω —à–∏–Ω—ç—á–ª—ç—Ö
    const product = await prisma.product.update({
      where: {id: parseInt(id)},
      data: {
        name,
        description,
        price: parseFloat(price),
        size,
        color,
        stockQuantity: parseInt(stockQuantity),
        ...(imageUrl && {imageUrl}), // –•—ç—Ä—ç–≤ –∑—É—Ä–∞–≥ –±–∞–π–≥–∞–∞ –±–æ–ª —à–∏–Ω—ç—á–∏–ª–Ω—ç
        category: {connect: {id: parseInt(categoryId)}},
      },
    });

    res.status(200).json(product);
  } catch (error) {
    res.status(500).json({error: "Error updating product"});
  }
};

const deleteProduct = async (req, res) => {
  const {id} = req.params;
  try {
    const product = await prisma.product.delete({
      where: {id: parseInt(id)},
    });

    res.status(200).json({message: "Product deleted", product});
  } catch (error) {
    res.status(500).json({error: "Error deleting product"});
  }
};

// üöÄ –≠–∫—Å–ø–æ—Ä—Ç —Ö–∏–π—Ö
module.exports = {
  getProducts,
  getProductById,
  createProduct: [upload.single("imageUrl"), createProduct], // üñºÔ∏è –ó—É—Ä–∞–≥ –æ—Ä—É—É–ª–∞—Ö
  updateProduct: [upload.single("imageUrl"), updateProduct],
  deleteProduct,
};
